The ``0-add_integer`` module
============================

Using ``add_integer``
---------------------

Import the function:
	>>> add_integer = __import__('0-add_integer').add_integer

Adding 10.5 and default b:
	>>> add_integer(10.5)
	108

Adding 10 and 20:
	>>> add_integer(10, 20)
	30

Adding 30 and a string:
	>>> add_integer(30, "Danny")
	Traceback (most recent call last):
		...
	TypeError: b must be an integer

Adding a string and default value of b:
	>>> add_integer("Tsega")
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Passing a list to the function:
	>>> add_integer([], [])
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Passing tuples to the function:
	>>> add_integer((1,2), (2,3))
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Substracting 20 and 10:
	>>> add_integer(20, -10)
	10

Adding two float numbers 30.5 and 60.7:
	>>> add_integer(30.5, 60.7)
	90

Let's try it by giving an empty value to the function:
	>>> add_integer()
	Traceback (most recent call last):
		...
	TypeError: add_integer() missing 1 required positional argument: 'a'

Let's try it by passing None:
	>>> add_integer(None)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Let's add two string values:
	>>> add_integer("Daniel", "Tsega")
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Lets' add tuple and integer:
	>>> add_integer((5,6))
	Traceback (most recent call last)
		...
	TypeError: a must be an integer

Let's add a list and a number:
	>>> add_integer([4,5,6])
	Traceback (most recent call last):
		...
	TypeError: a must be an integer
